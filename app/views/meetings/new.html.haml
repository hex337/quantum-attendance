- model_class = Meeting
- date_format = "%Y-%m-%dT%H:%M" #%m/%d/%Y %I:%M %P
.page-header
  - if @_current_school
    %h1
      = "Enter a Class for #{@_current_school.name}"
  - else
    %h1= t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize

  - if @_current_school
    #carousel.carousel.slide{:data => {:ride => "carousel"}}
      .carousel-inner{:role => "listbox"}
        .item.active
          #meeting-type-select-container
            %h3 1. Choose a Meeting Type and Time:
            .form-group
              %label{"for" => "meeting-type"}
                Class Type:
                %select#meeting-type.form-control
                  - MeetingType.all.each do |type|
                    %option{:value => "#{type.id}"}
                      = type.name

            .input-group
              #datetimepicker.input-append.date
                %label{"for" => "meeting-date"}
                  Class Time:
                  %input#meeting-date.form-control{:data => {:format => "MM/dd/yyyy hh:mm PP"}, :type => "datetime-local", :value => "#{DateTime.now.in_time_zone('America/Los_Angeles').strftime(date_format)}"}

            .input-group
              %label
                Instructor:
                %select#instructor.form-control
                  - @instructors.each do |member|
                    %option{:value => "#{member.id}"}
                      = member.full_name

            #assistants-select-container
              %h4 Add Assistants:
              .dataset-selector{:style => "padding-bottom: 3px"}
                .checkbox
                  %label
                    = check_box_tag "use_all_schools", 1, false
                    Use All Schools

              .find-input
                %input{:type => "text", :class => "typeahead form-control", :placeholder => "Find an Assistant"}

              %h4 Selected Assistants:
              #selected-assistants-container
                None selected yet.

              %br

            %a.btn.btn-primary.next-btn{:href => "#", :data => {:validate => "step_one"}} Select Students &#10095;

        .item
          #members-select-container
            %h3
              2. Select Who Attended
              %span.meeting-name
            = render "members/member_select", city: @_current_school

            %h4 Students - Click to Remove:
            #selected-members-container{:style => ""}
              None selected yet.

            %br
            %br

            %a.btn.btn-default.back-btn{:href => "#"} &#10094; Back
            &nbsp;
            %a.btn.btn-primary.next-btn.confirm{:href => "#", :data => {:validate => "step_two"}} Confirm &#10095;

        .item
          #members-confirm-container
            %h3
              3. Confirm Attendance

            %h4 Class Info:
            #class-info.container
              %table
                %tr
                  %th{:style => "text-align: right;"}
                    Class Type:
                  %td#meeting-type-confirm
                %tr
                  %th{:style => "text-align: right;"}
                    Date:
                  %td#date-confirm
                %tr
                  %th{:style => "text-align: right;"}
                    Instructor:
                  %td#instructor-confirm
                %tr
                  %th{:style => "text-align: right;"}
                    Teaching Assistants:
                  %td
                    #assisting-students

            %h4 Attending Students:
            #attending-students

            %h4 Comment:
            .form-group
              %textarea#comment.form-control

            %br
            %br

            %a.btn.btn-default.back-btn{:href => "#"} &#10094; Back
            %a#submit-btn.btn.btn-primary{:href => "#"} Submit

    .create-form
      %form
        %input{:type => "hidden", :id => "meeting_type_id", :name => "meeting_type_id"}

  - else
    %p= "You must select a school from the dropdown to create a new meeting."
    = image_tag("select_school.png")

:javascript
  $(document).ready(function() {

    $("#carousel").carousel({
      interval: false,
      wrap: false,
      keyboard: false
    });
    
    $.each($(".next-btn"), function(ndx, btn) {
      $(btn).click(function(event) {
        event.preventDefault();

        // handle validations, its heavy handed, but meh
        var vald = $(btn).data("validate");
        var isValid = true;
        var errorMsg = [];

        if (vald != undefined) {
          if (vald == "step_one") {
            if ($("#meeting-type").val() == "") {
              isValid = false;
              errorMsg.push("Must select a class type.");
            }

            if ($("#meeting-date").val() == "") {
              isValid = false;
              errorMsg.push("Must have a valid date and time.");
            }

            if ($("#instructor").val() == "") {
              isValid = false;
              errorMsg.push("Must select an instructor..");
            }
          // } else if (vald == "step_two") {
          //   if (mem.length() <= 0) {
          //     isValid = false;
          //     errorMsg.push("Must have at least one student.");
          //   }
          }

          if (!isValid) {
            alert(errorMsg.join(", "));
            return;
          }
        }

        if ($(btn).hasClass("confirm")) {
          var meetingType = $("#meeting-type").val();
          $("#meeting-type-confirm").html($("#meeting-type option[value=" + String(meetingType) + "]").text());

          var date = $("#meeting-date").val();
          $("#date-confirm").html(date);

          var instructor = $("#instructor").val();
          $("#instructor-confirm").html($("#instructor option[value=" + String(instructor) + "]").text());
          
          var memberIds = [];
          var count = 0;
          $("#attending-students").html("");
          $.each(window.mem.list(), function(ndx, item) {
            count++;

            var comma = ", ";
            if (count == window.mem.length()) {
              comma = "";
            }

            $("#attending-students").append("<span style=\"margin-right: 5px;\">" + item.value + comma + "</span>");
            memberIds.push(item.id);
          });
          
          var assistIds = [];
          var assistCount = 0;
          $("#assisting-students").html("");
          $.each(window.assist.list(), function(ndx, item) {
            assistCount++;

            var comma = ", ";
            if (assistCount == window.assist.length()) {
              comma = "";
            }

            $("#assisting-students").append("<span style=\"margin-right: 5px;\">" + item.value + comma + "</span>");
            assistIds.push(item.id);
          });
        }

        $("#carousel").carousel('next');
      });
    });
    
    $("#submit-btn").click(function(event) {
      $("body").block({ message: "Saving class..."});

      var comment = $("#comment").val();
      var meetingType = $("#meeting-type").val();
      var date = $("#meeting-date").val();
      var instructor = $("#instructor").val();
      var memberIds = [];
      var assistantIds = [];

      $.each(window.mem.list(), function(ndx, item) {
        memberIds.push(item.id);
      });

      $.each(window.assist.list(), function(ndx, item) {
        assistantIds.push(item.id);
      });

      $.ajax({
        url: "#{meetings_path(format: :json)}",
        method: "post",
        data: {
          meeting: {
            meeting_type: meetingType,
            date: date,
            instructor: instructor,
            comment: comment,
            students: memberIds.join(","),
            assistants: assistantIds.join(",")
          }
        }
      }).done(function(json) {
        $("body").unblock();
        window.location = "#{meetings_path()}";
      });
    });

    $.each($(".back-btn"), function(ndx, btn) {
      $(btn).click(function(event) {
        event.preventDefault();
        $("#carousel").carousel('prev');
      });
    });

    var elem = $("#selected-members-container");
    window.mem = new Members(elem);

    $("#find-student .typeahead").on('typeahead:selected', function(evt, item) {
      mem.addMember(item);

      $('.typeahead').typeahead('val', '');
    });

    var useAllSchoolsBox = $("#use_all_schools");
    var assistMembers = [#{Member.members_for_typeahead(@_current_school).map{|mem| mem.to_json}.join(",").html_safe}];
    var assistAllMembers = [#{Member.members_for_typeahead().map{|mem| mem.to_json}.join(",").html_safe}];

    var assistEngine = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value', 'belt'),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      local: assistMembers
    });

    useAllSchoolsBox.change(function() {
      if ($(this).is(":checked")) {
        assistEngine.clear();
        assistEngine.add(assistAllMembers);
        console.log("Assistant Search: updated to have all members.");
      }
      else {
        assistEngine.clear();
        assistEngine.add(assistMembers);
        console.log("Assistant Search: updated to only have current school's members.");
      }
    });

    $('#assistants-select-container .typeahead').typeahead({
      hint: true,
      highlight: true,
      minLength: 2
    }, {
      name: 'assistants',
      displayKey: 'value',
      source: assistEngine.ttAdapter(),
      templates: {
        suggestion: Handlebars.compile("<p><strong>{{value}}</strong> - {{belt}} (<i>{{school}}</i>)</p>")
      }
    });

    var assistElem = $("#selected-assistants-container");
    window.assist = new Assistants(assistElem);

    $("#assistants-select-container .typeahead").on('typeahead:selected', function(evt, item) {
      window.assist.addAssistant(item);
      $('#assistants-select-container .typeahead').typeahead('val', '');
    });
  });
